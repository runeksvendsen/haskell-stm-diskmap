Name:                key-value-store
Version:             0.1.0
Synopsis:            Simple key/value store (STM-map with added persistence)
Description:         A simple, multi-threaded key/value store. STMContainers.Map which syncs each map key/value to a file on disk, from which the map can be restored later. Each key/value is stored as a file, with file name being the hex-encoded key and the file content the serialized value. So this is optimized for relatively large map items, where storing a single file on disk for each item in the map is not an issue (trillions of items would probably be too much). This database is ACID-compliant (assuming no bugs). The STM map provides a layer of atomicity, allowing multiple map items to be updated in a single atomic operation.
License:             PublicDomain
Author:              Rune K. Svendsen
Maintainer:          runesvend@gmail.com
Stability:           Experimental
Homepage:            https://github.com/runeksvendsen/key-value-store
bug-reports:         https://github.com/runeksvendsen/key-value-store/issues
category:            Data, Containers, Persistence
Build-type:          Simple
Cabal-version:       >= 1.6

source-repository head
  type:     git
  location: https://github.com/runeksvendsen/key-value-store

Library
  exposed-modules:      Data.DiskMap
  ghc-options:          -W -O2

  build-depends:        base                      >= 4     && < 5,
                        bytestring,
                        base16-bytestring,
                        stm-containers,
                        binary,
                        hashable,
                        directory,
                        list-t,
                        stm,
                        exceptions

  hs-source-dirs:       src
  default-language:     Haskell2010
  other-modules:        Data.DiskMap.Internal.Helpers
                        Data.DiskMap.Internal.Update
                        Data.DiskMap.Internal.Types
                        Data.DiskMap.Sync.Sync
                        Data.DiskMap.Types


